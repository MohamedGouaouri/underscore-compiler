
()_ g() {

    $_ a;
    $_ b;
    $_ c;
    $_ d;
    $_ e;
    $_ f;
    $_ g;

    # Test1 arithmetic expression
    a <- (a + b * c) + ( ( d + b * c ) - f * g ) + f * g * d;

    # Test2 arithmetic expression
    # $_ n <- 2;
    # a <- a + b * d ^ (3 * n);

    # Test3 arithmetic expression
    # a <- a - c * d % 2;


    # Test4 if statement
    # ? ( ( a < 2 || a > 1 ) &&  (a-b) > 0 ){
    #     a <- a * 2;
    # }


    # Test5 if-else statement
    # ? (a > 10 && b < 2){
    #     a <- a * 2;
    # }
    # : (){
    #     a <- a / 2;
    # }

    # Test6 while loop

    # loop(a > 0 || c < a){
    #      a <- a * 3 + b;
    # }

    # Test7 while loop avec break

    # loop(a > 0 || c < a){
    #     a <- a * 3 + b;
    #     ? (a = 0){
    #         break;
    #     }
    #     a <- a - 1;
    # }

    # Test8 while loop avec continue
    # loop(a > 0 || c < a){
    #     a <- a * 3 + b;
    #     ? (a = 0){
    #         continue;
    #     }
    #     a <- a - 1;
    # }

    # Test9 for loop: Success
    # loop(a <- 0; a < 10; a <- a + 1){
    #     a <- b + c;
    # }

    # Test10 put every thing together x)

    # loop(true && (a < 0 || a > 10) && (a > (b - c))){
    #     a <- a ^ (a + 2) - b + c;
    #     ? ( a > 0 ){
    #         a <- b - 1;
    #     }
    #     :() {
    #         break;
    #     }

    #     loop(a <- 0; a < b + c; a <- a * 2){
    #         b <- b + a ^ 2;
    #     }
    # }


    # Test11 type mismatch: Fail
    # ""_ greeting = "Hello";
    # a <- b + greeting;

    # Test12 boolean typed expression as control flow condition
    # ? (greeting){
    #     a <- b;
    # }

    # Test12 break and continue outside loop
    # ? (a = 2){
    #     break;
    # }
    # ? (a < 0){
    #     continue;
    # }
}

#_
()_ f(){



    $_ x;

    # x <- 2 * -1 ;


    # loop( x != 2 ){
    #     x <- 3;
    # }

    # loop("hi") {
    #     x <- 1;
    #     continue;
        
    #     x <- 6;
    # }
    # x <- 7;



    # $_ y;
    # x <- x+y+(-1)/(y*x)+(-1)^x*x  ;

    # $_ a;
    # $_ b;
    # $_ c;
    # $_ d;

    # a <- a+b*((d+a)/(d+b))*c;

    # x <- 0;

    # $_ a;

    ?_ success <- (true || false) && true || false ;


    ""_ chaine <- "souaad";

    x <- x + 1;


        # loop(x <- 0; x > 0; x <- x + 1) {

        #     x <- 1;
        #     loop(x <- 0; x <= 2; x <- x*x) {

        #         ?(false) {
        #             x <- 0;
        #         }
        #         x <- 3;

        #     }
        #     x <- 4;

        # }

    


    # ? (true) {
    #     break;
    # }

    # loop ( ( ( x > 0  || ( x < 10 ) && ( x< 10) ) ) )  {
    #     x <- 1;
    #     ?( x = 2 ){
    #         x <- 3;
    #         continue;
    #         ?( x = 4 ){
    #             break;
    #             continue;
    #         }
    #         : () {
    #             x <- 5;
    #             continue;
    #             break;
    #         }
    #         x <- 6;
    #     }
    #     x <- 7;
    # }

    # x <- 1 + (3 + (5 * 4 * (4 * 4 * ( 2 + 1))));
    # $_y;
    # loop(true){
    #     x <- x * 1;
    #     loop(true){
    #         loop()
    #     }
    #     x <- x + 1;
    # }
    # x <- x + 3;
    # $_ y;
    # loop(true){
    #     ? ( ( (true && ( false && false )) ) ){
    #         x <- x * 3;
    #         break;
    #     }
    #     break;
    # }

}

_#